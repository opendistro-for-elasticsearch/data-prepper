plugins {
    id "com.diffplug.spotless" version "5.12.4"
}

apply from: file("${rootDir}/build-resources.gradle")
allprojects {
    apply plugin: 'com.diffplug.spotless'

    group = 'com.amazon'
    
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    spotless {
        format 'markdown', {
            target '*.md'
            // TODO: enrich format rules
            endWithNewline()
        }
        format 'misc', {
            target '.gitignore', '*.yml', '*.yaml'
            // TODO: enrich format rules
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    sourceCompatibility = '1.8'
    spotless {
        java {
            // TODO: enrich format rules
            removeUnusedImports()
        }
    }
    dependencies {
        implementation "com.google.guava:guava:31.0.1-jre"
        implementation "org.apache.logging.log4j:log4j-core:2.14.1"
        implementation "org.slf4j:slf4j-api:1.7.30"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.14.1"
        testImplementation("junit:junit:4.13") {
            exclude group: 'org.hamcrest' // workaround for jarHell
        }
        constraints {
            implementation('org.apache.httpcomponents:httpclient') {
                version {
                    require '4.5.13'
                }
                because 'We want the newest version of httpclient.'
            }
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { def details ->
            if (details.requested.group == 'io.netty' && !details.requested.name.startsWith('netty-tcnative')) {
                details.useVersion '4.1.61.Final'
                details.because 'includes CVE fix'
            }
        }
    }

    build.dependsOn test
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    task allDeps(type: DependencyReportTask) {}
}

configure(coreProjects) {
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    test {
        useJUnit()
        finalizedBy jacocoTestReport // report is always generated after tests run
    }
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit {
                    minimum = 0.65 //TODO increase this to 0.75
                }
            }
        }
    }
    check.dependsOn jacocoTestCoverageVerification
}